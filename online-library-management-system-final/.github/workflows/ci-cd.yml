name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend

jobs:
  # Backend Build and Test
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: ./mvnw test

    - name: Build with Maven
      run: ./mvnw clean package -DskipTests

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: backend/target/surefire-reports/

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar

  # Frontend Build and Test
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint --if-present

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

  # Build and Push Docker Images
  build-and-push:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment artifacts
      run: |
        mkdir -p deployment
        cat > deployment/docker-compose.yml << EOF
        version: '3.8'
        services:
          mysql:
            image: mysql:8.0
            environment:
              MYSQL_DATABASE: library_db
              MYSQL_USER: library_user
              MYSQL_PASSWORD: \${{ secrets.DB_PASSWORD }}
              MYSQL_ROOT_PASSWORD: \${{ secrets.DB_ROOT_PASSWORD }}
            volumes:
              - mysql_data:/var/lib/mysql
            networks:
              - library-network
            healthcheck:
              test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
              timeout: 20s
              retries: 10

          backend:
            image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            environment:
              - SPRING_PROFILES_ACTIVE=prod
              - DB_URL=\${{ secrets.DB_URL }}
              - DB_USERNAME=\${{ secrets.DB_USERNAME }}
              - DB_PASSWORD=\${{ secrets.DB_PASSWORD }}
            depends_on:
              mysql:
                condition: service_healthy
            networks:
              - library-network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
              interval: 30s
              timeout: 10s
              retries: 5
              start_period: 60s

          frontend:
            image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
            ports:
              - "80:80"
            depends_on:
              backend:
                condition: service_healthy
            networks:
              - library-network

        volumes:
          mysql_data:
            driver: local

        networks:
          library-network:
            driver: bridge
        EOF

        # Create deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üöÄ Starting deployment..."

        # Create environment file
        cat > .env << EOFF
        DB_PASSWORD=${DB_PASSWORD}
        DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
        DB_URL=${DB_URL}
        DB_USERNAME=${DB_USERNAME}
        JWT_SECRET=${JWT_SECRET}
        EOFF

        # Pull latest images
        docker-compose pull

        # Deploy with new images
        docker-compose up -d

        # Wait for services to be healthy
        echo "‚è≥ Waiting for services to be healthy..."
        sleep 30

        # Check health
        if curl -f http://localhost/api/actuator/health > /dev/null 2>&1; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
        EOF

        chmod +x deployment/deploy.sh

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment/
