name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend

jobs:
  deploy-staging:
    if: ${{ github.event.inputs.environment == 'staging' || github.event_name == 'workflow_run' }}
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-files
        path: deployment/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to staging
      run: |
        export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
        export DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
        export DB_URL="${{ secrets.DB_URL }}"
        export DB_USERNAME="${{ secrets.DB_USERNAME }}"
        export JWT_SECRET="${{ secrets.JWT_SECRET }}"

        chmod +x deployment/deploy.sh
        ./deployment/deploy.sh

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Staging deployment completed successfully!"
        echo "Frontend: http://localhost"
        echo "Backend API: http://localhost/api"
        echo "Health Check: http://localhost/api/actuator/health"

  deploy-production:
    if: ${{ github.event.inputs.environment == 'production' }}
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-files
        path: deployment/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create production backup
      run: |
        echo "Creating backup of current production deployment..."

    - name: Deploy to production
      run: |
        export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
        export DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
        export DB_URL="${{ secrets.DB_URL }}"
        export DB_USERNAME="${{ secrets.DB_USERNAME }}"
        export JWT_SECRET="${{ secrets.JWT_SECRET }}"

        chmod +x deployment/deploy.sh
        ./deployment/deploy.sh

    - name: Verify production deployment
      run: |
        echo "‚è≥ Waiting for production services to be healthy..."
        sleep 60

        if curl -f http://localhost/api/actuator/health > /dev/null 2>&1; then
          echo "‚úÖ Production deployment successful!"
        else
          echo "‚ùå Production deployment failed!"
          exit 1
        fi

    - name: Notify production deployment
      if: success()
      run: |
        echo "üéâ Production deployment completed successfully!"
        echo "Application is now live in production environment"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed - initiating rollback..."
        exit 1
